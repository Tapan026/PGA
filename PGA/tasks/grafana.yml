---
- name: Create grafana user
  ansible.builtin.user:
    name: "{{ grafana_user }}"
    system: yes
  become: true

- name: Create grafana group
  ansible.builtin.group:
    name: "{{ grafana_group }}"
    system: yes
  become: true

- name: Create required directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ grafana_user }}"
    group: "{{ grafana_group }}"
    mode: '0755'
  loop:
    - "{{ grafana_home }}"
    - "{{ grafana_data_dir }}"
    - "{{ grafana_log_dir }}"
    - "{{ grafana_config_dir }}"
  become: true

- name: Download Grafana
  ansible.builtin.get_url:
    url: "{{ grafana_download_url }}"
    dest: "/tmp/grafana-enterprise-{{ grafana_version }}.linux-amd64.tar.gz"
    mode: '0644'
  
- name: Install Grafana
  ansible.builtin.unarchive:
    src: "/tmp/grafana-enterprise-{{ grafana_version }}.linux-amd64.tar.gz"
    dest: /tmp/
    remote_src: yes
  become: true

- name: Set permissions
  ansible.builtin.file:
    path: "{{ grafana_home }}"
    state: directory
    owner: "{{ grafana_user }}"
    group: "{{ grafana_group }}"
    recurse: yes
  become: true

- name: Configure Grafana
  ansible.builtin.template:
    src: "grafana.ini.j2"
    dest: "{{ grafana_config_dir }}/grafana.ini"
    owner: "{{ grafana_user }}"
    group: "{{ grafana_group }}"
    mode: '0644'
  become: true

- name: Copy systemd service file
  ansible.builtin.copy:
    src: grafana.service
    dest: /etc/systemd/system/grafana.service
  notify: systemd_reload
  become: true

- name: Start Grafana service
  ansible.builtin.service:
    name: grafana
    state: started
    enabled: yes
  become: true

- name: Check if Grafana is accessible
  ansible.builtin.uri:
    url: "http://{{ prometheus_host }}:3000"
    method: GET
    status_code: 200
  register: prometheus_status
  until: prometheus_status.status == 200
  retries: 5
  delay: 10
